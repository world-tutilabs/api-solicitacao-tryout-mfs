generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model HomologationStatus {
  id           Int            @id @default(autoincrement())
  description  String         @db.VarChar(250)
  homologation Homologation[]

  @@map("homologation_status")
}

model Homologation {
  id                     String             @id @default(uuid())
  fk_solicitation        String             @unique
  created_user           Json
  created_at             DateTime
  homologation_user      Json?
  homologation_at        DateTime?
  comment                String?
  fk_homologation_status Int
  status                 HomologationStatus @relation(fields: [fk_homologation_status], references: [id])
  solicitation           SolicitationTryout @relation(fields: [fk_solicitation], references: [id], onDelete: Cascade)

  @@map("homologation")
}

model SolicitationTryout {
  id               String            @id @default(uuid())
  number_tryout    Int               @unique @default(autoincrement())
  code_sap         String            @db.VarChar(250)
  desc_product     String            @db.VarChar(250)
  client           String            @db.VarChar(250)
  molde_familia    molde_familia?    @default(false)
  reason           Reason            @relation(fields: [reasonId], references: [id])
  reasonId         Int
  code             String?
  programmed_date  DateTime
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  homologation     Homologation?
  injectionProcess InjectionProcess?

  @@map("solicitation_tryout")
}

model InjectionProcess {
  id              String             @default(uuid())
  id_tryout       String             @unique
  proc_technician Json
  quantity        Int
  tryout          SolicitationTryout @relation(fields: [id_tryout], references: [id], onDelete: Cascade)
  feedstock       Feedstock?
  labor           Labor?
  mold            Mold?
  machine         Machine?

  @@index([id_tryout], map: "id_tryou")
  @@map("injection_process")
}

model Feedstock {
  id                   String           @id @default(uuid())
  description          String           @db.VarChar(250)
  kg                   Float
  id_process_injection String           @unique
  fk_injection_process InjectionProcess @relation(fields: [id_process_injection], references: [id_tryout], onDelete: Cascade)

  @@map("feedstock")
}

model Machine {
  id                   String           @id @default(uuid())
  model                String           @db.VarChar(250)
  id_injection_process String           @unique
  fk_process_injection InjectionProcess @relation(fields: [id_injection_process], references: [id_tryout], onDelete: Cascade)
}

model Labor {
  id                   String           @id @default(uuid())
  amount               Int
  description          String           @db.VarChar(250)
  id_injection_process String           @unique
  fk_process_injection InjectionProcess @relation(fields: [id_injection_process], references: [id_tryout], onDelete: Cascade)

  @@map("labor")
}

model Mold {
  id                   String           @id @default(uuid())
  number_cavity        Int
  desc_mold            String           @db.VarChar(250)
  id_injection_process String           @unique
  fk_process_injection InjectionProcess @relation(fields: [id_injection_process], references: [id_tryout], onDelete: Cascade)

  @@map("mold")
}

model Reason {
  id                 Int                  @id @default(autoincrement())
  description        String
  SolicitationTryout SolicitationTryout[]
}

enum molde_familia {
  true
  false
}
